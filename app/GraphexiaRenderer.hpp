#ifndef _GRAPHEXIA_APP_GRAPHEXIARENDERER__HPP_
#define _GRAPHEXIA_APP_GRAPHEXIARENDERER__HPP_

#include "GraphView.hpp"
#include "Core.hpp"

#include <sokol/sokol_gfx.h>
#include <vector>

// autogenerated...
#include "Graph.glsl.h"

const usize BatchedTextureVtxDimensions = 32;
const usize BatchedTextureEdgeDimensions = 1024;

struct BatchedVertex {
    f32x2 position;
    f32 size;
    u32 color; // RGBA8
};

struct BatchedEdge {
    u32 fromId;
    u32 toId;
    f32 size;
    u32 color;
};

class GraphexiaRenderer final {
public:
    void Init(u32x2 viewport);
    void Render(const GraphView& view, const SelectionType selectionType, const usize selectedId, const f32x2 worldMousePosition);

    void ReconstructView(const GraphView& view);
    void ReconstructEdges(const std::vector<gpx::Edge>& edges);
    void AddVertex(const Vertex& vtx);
    void AddEdge(const gpx::Edge& edge);

    void UpdateVertexPosition(usize id, f32x2 position);
    void UpdateVertexColor(usize id, u32 color);
    void UpdateEdgeColor(usize id, u32 color);
    void DeleteVertex(usize id);

    void SetCameraZoom(f32 zoom);
    f32 GetCameraZoom() const { return this->cameraZoom; }

    f32x2 GetCameraPosition() const { return this->cameraPosition; }
    void SetCameraPosition(f32x2 position);

    void SetViewport(u32x2 viewport);
    f32x2 ScreenToWorld(f32x2 screenPosition) const;
private:
    void UpdateGlobalData();

    u32x2 viewport;
    f32x2 cameraPosition;
    f32 cameraZoom;

    bool graphDirty;
    sg_shader gVtxShader; sg_shader gEdgesShader;
    sg_pipeline gVtxPipeline; sg_pipeline gEdgesPipeline;
    Graphexia_GlobalData_t gGlobalData;

    usize gVtxBatched; BatchedVertex gVtxData[BatchedTextureVtxDimensions*BatchedTextureVtxDimensions];
    usize gEdgesBatched; BatchedEdge gEdgeData[BatchedTextureEdgeDimensions*BatchedTextureEdgeDimensions];
    sg_sampler gImageSampler;
    sg_image gVtxImage; sg_image gEdgesImage;
    sg_bindings gVtxBindings; sg_bindings gEdgesBindings;
};
#endif
