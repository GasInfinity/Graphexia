#ifndef _GRAPHEXIA_APP_GPXRENDERER__HPP_
#define _GRAPHEXIA_APP_GPXRENDERER__HPP_

#include "Core.hpp"
#include "GPXFontRenderer.hpp"
#include "GraphView.hpp"
#include "Render/StaticTextureBatch.hpp"

#include <sokol/sokol_gfx.h>

#include <vector>

// autogenerated...
#include "Graph.glsl.h"

const usize BatchedVtxDimensions = 32;
const usize BatchedEdgeDimensions = 1024;

struct BatchedVertex {
    f32x2 position;
    f32 size;
    u8x4 color; // RGBA8
};

struct BatchedEdge {
    u32 fromId;
    u32 toId;
    f32 size;
    u8x4 color;
};

class GPXRenderer final {
public:
    void Init(u32x2 viewport);
    void Render();

    void ReconstructView(const GraphView& view);
    void ReconstructEdges(const std::vector<gpx::Edge>& edges);

    void AddVertex(const Vertex& vtx);
    void AddEdge(const gpx::Edge& edge);

    void UpdateVertexPosition(usize id, f32x2 position);
    void UpdateVertexColor(usize id, u8x4 color);
    void UpdateEdgeColor(usize id, u8x4 color);

    void EraseVertex(usize id);
    void EraseEdge(usize id);

    void SetCameraZoom(f32 zoom);
    f32 GetCameraZoom() const { return this->cameraZoom; }

    f32x2 GetCameraPosition() const { return this->cameraPosition; }
    void SetCameraPosition(f32x2 position);

    void SetViewport(u32x2 viewport);
    f32x2 ScreenToWorld(f32x2 screenPosition) const;
private:
    void UpdateGlobalData();

    u32x2 viewport;
    f32x2 cameraPosition;
    f32 cameraZoom;

    StaticTextureBatch<BatchedVtxDimensions, BatchedVertex, IMG_VtxBatchDataTex, SMP_BatchDataSmp> batchedVertices; 
    StaticTextureBatch<BatchedEdgeDimensions, BatchedEdge, IMG_EdgeBatchDataTex, SMP_BatchDataSmp> batchedEdges; 

    Graphexia_GlobalGraphData_t gGlobalData;
    GPXFontRenderer fontRenderer;
};
#endif
